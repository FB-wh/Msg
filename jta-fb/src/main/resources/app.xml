<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         http://www.springframework.org/schema/task
         http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!-- 自动扫描 -->
	<context:component-scan base-package="org.fb.jta" />
	
	<!--指定Spring配置中用到的属性文件-->   
    <bean id="propertyConfig"   
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">   
        <property name="locations">   
            <list>   
                <value>classpath:jdbc.properties</value>   
            </list>   
        </property>   
    </bean>
   
	 <!-- 数据源A -->   
    <bean id="dataSourceA" class="com.atomikos.jdbc.AtomikosDataSourceBean"
        init-method="init" destroy-method="close">
        <property name="uniqueResourceName">
            <value>dataSourceA</value>
        </property>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="user">${jdbc.username1}</prop>
                <prop key="password">${jdbc.password1}</prop>
                <prop key="URL">${mysql.url_1}</prop>
            </props>
        </property>     
        <property name="poolSize" value="10"/> 
    </bean>
  
    <!-- 数据源B -->   
    <bean id="dataSourceB" class="com.atomikos.jdbc.AtomikosDataSourceBean"
        init-method="init" destroy-method="close">
        <property name="uniqueResourceName">
            <value>dataSourceB</value>
        </property>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="user">${jdbc.username2}</prop>
                <prop key="password">${jdbc.password2}</prop>
                <prop key="URL">${mysql.url_2}</prop>
            </props>
        </property>     
        <property name="poolSize" value="10"/> 
    </bean>
   
     <!-- atomikos事务管理器 -->
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
        init-method="init" destroy-method="close">
        <description>UserTransactionManager</description>
        <property name="forceShutdown">
            <value>true</value>
        </property>
    </bean>

    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="300" />
    </bean>
    
    <!-- spring 事务管理器 -->
    <bean id="springTransactionManager"
        class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager">
            <ref bean="atomikosTransactionManager" />
        </property>
        <property name="userTransaction">
            <ref bean="atomikosUserTransaction" />
        </property>
    </bean>
   
   <!-- spring　事务模板 -->
    <bean id="transactionTemplate"
        class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager">
            <ref bean="springTransactionManager" />
        </property>
    </bean>  
   
   <!-- 配置SqlSessionFactory对象 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryUser">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSourceB" />
		<!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
		<property name="configLocation" value="classpath:db/mybatis-config.xml" />
		<!-- 扫描entity包 使用别名 -->
		<property name="typeAliasesPackage" value="org.fb.jta.entity" />
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/user/user.xml" />
	</bean>
	
	<!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryUser" />
		<!-- 给出需要扫描Dao接口包 -->
		<property name="basePackage" value="org.fb.jta.dao.user" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryUser" />
	</bean>
	
	<!-- 配置SqlSessionFactory对象 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryMerchant">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSourceA" />
		<!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
		<property name="configLocation" value="classpath:db/mybatis-config.xml" />
		<!-- 扫描entity包 使用别名 -->
		<property name="typeAliasesPackage" value="org.fb.jta.entity" />
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/merchant/*.xml" />
	</bean>
	
	<!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryMerchant" />
		<!-- 给出需要扫描Dao接口包 -->
		<property name="basePackage" value="org.fb.jta.dao.merchant" />
	</bean>
   
    <aop:config>  
        <aop:advisor pointcut="execution(* org.fb.jta.services.*.*(..))"  
            advice-ref="txAdvice" />  
    </aop:config> 
    
     <!-- JTA事务传播特性 -->  
    <tx:advice id="txAdvice" transaction-manager="springTransactionManager">  
        <tx:attributes>
        	<tx:method name="query*" read-only="true" />  
            <tx:method name="*" isolation="DEFAULT" propagation="REQUIRED"  rollback-for="Exception" />  
        </tx:attributes>  
    </tx:advice>  
</beans>